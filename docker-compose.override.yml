version: '3.7'

networks:
  # postgres:
  #     driver: bridge
  frontend:
  backend:

volumes:
  pgdata:
  pgadmin-data:


services:

  postgres_exporter:
    environment:
      DATA_SOURCE_URI: "postgres:5432/atdb?sslmode=disable"
      DATA_SOURCE_USER: "docker"
      DATA_SOURCE_PASS: "docker"
      PG_EXPORTER_EXTEND_QUERY_PATH: "/etc/postgres_exporter/queries.yaml"
    volumes:
      - ./queries.yaml:/etc/postgres_exporter/queries.yaml:ro
    ports:
      - "9187:9187"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 500M
    networks:
      # - postgres
      - backend

  postgres:
    environment:
      PGUSER: "docker"
      POSTGRES_DB: "atdb"
      POSTGRES_USER: "docker"
      POSTGRES_PASSWORD: "docker"
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "atdb", "-U", "admin" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
    - backend
  # postgres:
  #   command:
  #     - "postgres"
  #     - "-c"
  #     - "max_connections=50"
  #     - "-c"
  #     - "shared_buffers=1GB"
  #     - "-c"
  #     - "effective_cache_size=4GB"
  #     - "-c"
  #     - "work_mem=16MB"
  #     - "-c"
  #     - "maintenance_work_mem=512MB"
  #     - "-c"
  #     - "random_page_cost=1.1"
  #     - "-c"
  #     - "temp_file_limit=10GB"
  #     - "-c"
  #     - "log_min_duration_statement=200ms"
  #     - "-c"
  #     - "idle_in_transaction_session_timeout=10s"
  #     - "-c"
  #     - "lock_timeout=1s"
  #     - "-c"
  #     - "statement_timeout=60s"
  #     - "-c"
  #     - "shared_preload_libraries=pg_stat_statements"
  #     - "-c"
  #     - "pg_stat_statements.max=10000"
  #     - "-c"
  #     - "pg_stat_statements.track=all"
  #   environment:
  #     POSTGRES_DB: "atdb"
  #     POSTGRES_USER: "postgres"
  #     POSTGRES_PASSWORD: "postgres"
  #     # PGDATA: "/data/postgres"
  #   # volumes:
  #   #    - pgdata:/data/postgres
  #   #    - ./docker_postgres_init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
  #     PGDATA: "/var/lib/postgresql/data/pgdata"
  #   volumes:
  #     - ../2. Init Database:/docker-entrypoint-initdb.d
  #     - pgdata:/var/lib/postgresql/data
  #   ports:
  #     - "5432:5432"
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres -d atdb"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 10s
  #   restart: unless-stopped
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '1'
  #         memory: 4G
  #   networks:
  #     - postgres
  #     - backend

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4:7.2
    environment:
      PGADMIN_DEFAULT_EMAIL: "live-dev@hotmail.com"
      PGADMIN_DEFAULT_PASSWORD: "pgadminpwd4user"
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    networks:
      # - postgres
      - backend

  cache-data:
    ports:
      - "6377:6379"  
    networks:
      - backend 

  # sql-data:
  #   environment:
  #     - SA_PASSWORD=your@Password
  #     - ACCEPT_EULA=Y
  #     - MSSQL_PID=Developer
  #   ports:
  #     - "5433:1433"
  #   networks:
  #     - backend

  air-api:
    environment:
      # - ASPNETCORE_ENVIRONMENT=Development
      # - ConnectionString=Host=192.168.0.97;Port=5432;Database=atdb;Username=postgres;Password=NewPassw0rd
      - ConnectionString=Host=docker.for.mac.localhost;Port=5432;Database=atdb;Username=docker;Password=docker;Pooling=true;
      - Url_AggregatorUrl=http://${EXTERNAL_DNS_NAME_OR_IP}:5003/
      #- ASPNETCORE_URLS=https://+:443;http://+:80
    ports:
      - "5001:8080"
      # - "10001:443"
    #volumes:
    #  - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro
    restart: always
    depends_on:
      - postgres
    networks:
      - backend
      # - postgres
  
  air-aggregator:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      # - ConnectionString=Server=sql-data;Initial Catalog=AirDb;Persist Security Info=False;User ID=sa;Password=your@Password;Connection Timeout=30;
      # - ASPNETCORE_URLS=https://+:443;http://+:80
    ports:
      - "5003:8080"
      # - "10003:443"
    #volumes:
    #  - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro
    # depends_on:
      # - sql-data
    networks:
      - backend